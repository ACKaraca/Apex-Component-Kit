/**
 * ACK Compiler Type Definitions
 * English comments: This file defines the fundamental data structures for the compiler.
 */

/** 
 * Represents the parsed form of an .ack component.
 */
export interface ComponentModel {
  name: string;
  scriptBlock: ScriptBlock;
  templateBlock: TemplateBlock;
  styleBlock: StyleBlock;
  source: string;
  filePath: string;
}

/**
 * Represents the parsed form of the <script> block.
 */
export interface ScriptBlock {
  content: string;
  ast: any; // Babel AST
  reactiveVariables: ReactiveVariable[];
  imports: ImportStatement[];
}

/**
 * Represents the parsed form of the <template> block.
 */
export interface TemplateBlock {
  content: string;
  ast: any; // Template AST
  usedVariables: string[];
  events: EventBinding[];
}

/**
 * Represents the parsed form of the <style> block.
 */
export interface StyleBlock {
  content: string;
  scoped: boolean;
  scopeId: string;
  rules: StyleRule[];
}

/**
 * Represents a reactive variable.
 */
export interface ReactiveVariable {
  name: string;
  type: string;
  initialValue: string;
  usedInTemplate: boolean;
  dependencies: string[];
  line: number;
}

/**
 * Represents an import statement.
 */
export interface ImportStatement {
  source: string;
  specifiers: ImportSpecifier[];
}

/**
 * Represents an import specifier.
 */
export interface ImportSpecifier {
  local: string;
  imported: string;
  type: 'default' | 'named';
}

/**
 * Represents event binding in a template.
 */
export interface EventBinding {
  element: string;
  event: string;
  handler: string;
  line: number;
}

/**
 * Represents a CSS rule.
 */
export interface StyleRule {
  selector: string;
  properties: CSSProperty[];
}

/**
 * Represents a CSS property.
 */
export interface CSSProperty {
  name: string;
  value: string;
}

/**
 * Represents a dependency graph.
 */
export interface DependencyGraph {
  nodes: Map<string, DependencyNode>;
  edges: Map<string, string[]>;
}

/**
 * Represents a node in the dependency graph.
 */
export interface DependencyNode {
  name: string;
  type: 'variable' | 'computed' | 'effect';
  dependencies: string[];
  dependents: string[];
}

/**
 * Represents code generation options.
 */
export interface CodegenOptions {
  format: 'esm' | 'cjs' | 'both';
  minify: boolean;
  sourceMap: boolean;
  ssr: boolean;
  componentName: string;
}

/**
 * Represents code output generated by the compiler.
 */
export interface CompileResult {
  code: string;
  map?: string;
  ast?: any;
  errors: CompileError[];
  warnings: CompileWarning[];
}

/**
 * Represents a compiler error.
 */
export interface CompileError {
  message: string;
  line: number;
  column: number;
  source: string;
}

/**
 * Represents a compiler warning.
 */
export interface CompileWarning {
  message: string;
  line: number;
  column: number;
}
